type Global @entity {
  id: ID!
  totalHoldings: BigInt! # counter
  defaultTreasuryAlloc: BigInt!
  defaultLpAlloc: BigInt!
  treasuryAddress: Bytes!
  lpStakingAddress: Bytes!
  inventoryStakingAddress: Bytes!
  nftxVaultFactory: Bytes!
  feeDistributorAddress: Bytes!
  eligibilityManagerAddress: Bytes!
  fees: Fee!
}

type Vault @entity {
  id: ID! # address
  vaultId: BigInt!
  token: Token!
  asset: Asset!
  manager: Manager!
  is1155: Boolean!
  allowAllItems: Boolean!
  isFinalized: Boolean! # if manager == 0x0
  holdings: [Holding!]! @derivedFrom(field: "vault") # NFT IDs, note 1155s can have multiple of same ID
  mints: [Mint!]! @derivedFrom(field: "vault")
  swaps: [Swap!]! @derivedFrom(field: "vault")
  redeems: [Redeem!]! @derivedFrom(field: "vault")
  inventoryStakingPool: InventoryPool
  lpStakingPool: Pool
  fees: Fee!
  usesFactoryFees: Boolean!
  features: Feature!
  feeReceivers: [FeeReceiver!]! @derivedFrom(field: "vault")
  feeReceipts: [FeeReceipt!]! @derivedFrom(field: "vault")
  totalFees: BigInt! # counter
  treasuryAlloc: BigInt!
  allocTotal: BigInt!
  createdAt: BigInt!
  vaultDayData: [VaultDayData!]! @derivedFrom(field: "vault")
  totalMints: BigInt!
  totalSwaps: BigInt!
  totalRedeems: BigInt!
  totalHoldings: BigInt!
  createdBy: VaultCreator
  eligibilityModule: EligibilityModule
}

type EligibilityModule @entity {
  id: ID! # address
  eligibilityManager: Bytes! # address
  targetAsset: Asset!
  name: String!
  finalizedOnDeploy: Boolean!
  finalized: Boolean! # if manager is set to 0x0000...0000
  eligibleIds: [BigInt!] # null if not set
  eligibleRange: [BigInt!] # i.e. [100, 200] start 100 end 200. null if not set.
}

type VaultCreator @entity {
  id: ID! #address
  vaults: [Vault!]! @derivedFrom(field: "createdBy")
}

type Holding @entity {
  id: ID!
  tokenId: BigInt!
  vault: Vault!
  amount: BigInt!
  dateAdded: BigInt!
}

type Fee @entity {
  id: ID! # address
  vault: Vault! @derivedFrom(field: "fees")
  mintFee: BigInt!
  randomRedeemFee: BigInt!
  targetRedeemFee: BigInt!
  swapFee: BigInt!
  randomSwapFee: BigInt!
  targetSwapFee: BigInt!
}

type Feature @entity {
  id: ID! # address
  vault: Vault! @derivedFrom(field: "features")
  enableMint: Boolean!
  enableRandomRedeem: Boolean!
  enableTargetRedeem: Boolean!
  enableRandomSwap: Boolean!
  enableTargetSwap: Boolean!
}

type Asset @entity {
  id: ID! # address
  name: String!
  symbol: String!
  vaults: [Vault!]! @derivedFrom(field: "asset")
}

type Manager @entity {
  id: ID! # address
  vaults: [Vault!]! @derivedFrom(field: "manager")
}

type FeeReceiver @entity {
  id: ID!
  vault: Vault
  allocPoint: BigInt!
}

type SimpleFeeReceiver @entity {
  id: ID!
  receiver: Bytes!
  allocPoint: BigInt!
}

type FeeReceipt @entity {
  id: ID!
  vault: Vault!
  token: Token!
  transfers: [FeeTransfer!]! @derivedFrom(field: "feeReceipt")
  date: BigInt!
}

type FeeTransfer @entity {
  id: ID!
  amount: BigInt!
  to: Bytes!
  feeReceipt: FeeReceipt!
}

type Pool @entity {
  id: ID! # address
  vault: Vault!
  rewardToken: Token!
  stakingToken: Token!
  dividendToken: Token!
  totalRewards: BigInt!
  deployBlock: BigInt!
}

type InventoryPool @entity {
  id: ID! # address
  vault: Vault!
  rewardToken: Token!
  stakingToken: Token!
  dividendToken: Token!
}

type Token @entity {
  id: ID! # address
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

type Mint @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  vault: Vault!
  nftIds: [BigInt!]
  amounts: [BigInt!]
  feeReceipt: FeeReceipt!
  vaultInteraction: Boolean!
  zapAction: ZapSell @derivedFrom(field: "vaultAction")
}

type Swap @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  vault: Vault!
  mintedIds: [BigInt!]!
  mintedAmounts: [BigInt!]!
  redeemedIds: [BigInt!]!
  specificIds: [BigInt!]!
  targetCount: BigInt!
  randomCount: BigInt!
  feeReceipt: FeeReceipt!
  vaultInteraction: Boolean!
  zapAction: ZapSwap @derivedFrom(field: "vaultAction")
}

type Redeem @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  vault: Vault!
  nftIds: [BigInt!]!
  specificIds: [BigInt!]!
  targetCount: BigInt!
  randomCount: BigInt!
  feeReceipt: FeeReceipt!
  vaultInteraction: Boolean!
  zapAction: ZapBuy @derivedFrom(field: "vaultAction")
}

type User @entity {
  id: ID! # address
  mints: [Mint!]! @derivedFrom(field: "user")
  redeems: [Redeem!]! @derivedFrom(field: "user")
}

type StakedLpUser @entity {
  id: ID! # address
  activePools: [Pool!]!
  lpZaps: [Zap!]! @derivedFrom(field: "user")
  userRewards: [Reward!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "user")
}

type StakedIpUser @entity {
  id: ID!
  pools: [InventoryPoolUserActivity!]! @derivedFrom(field: "user")
}

type InventoryPoolUserActivity @entity {
  id: ID!
  user: StakedIpUser!
  deposited: BigInt!
  withdrawn: BigInt!
}

type Reward @entity {
  id: ID! # tx
  date: BigInt!
  pool: Pool!
  user: StakedLpUser!
  reward: BigInt!
}

type Deposit @entity {
  id: ID! # tx
  date: BigInt!
  pool: Pool!
  user: StakedLpUser!
  deposit: BigInt!
}

type Withdrawal @entity {
  id: ID! # tx
  date: BigInt!
  pool: Pool!
  user: StakedLpUser!
  withdrawal: BigInt!
}

type VaultDayData @entity {
  id: ID!
  date: BigInt! # end of range
  mintsCount: BigInt!
  swapsCount: BigInt!
  redeemsCount: BigInt!
  holdingsCount: BigInt!
  totalMints: BigInt!
  totalSwaps: BigInt!
  totalRedeems: BigInt!
  totalHoldings: BigInt!
  vault: Vault!
}

type VaultHourData @entity {
  id: ID!
  date: BigInt! # end of range
  mintsCount: BigInt!
  swapsCount: BigInt!
  redeemsCount: BigInt!
  holdingsCount: BigInt!
  totalMints: BigInt!
  totalSwaps: BigInt!
  totalRedeems: BigInt!
  totalHoldings: BigInt!
  vault: Vault!
}

type Zap @entity {
  id: ID!
  vault: Vault!
  user: StakedLpUser!
  lockEndTime: BigInt!
  amount: BigInt!
  contractAddress: Bytes!
}

type ZapBuy @entity {
  id: ID!
  vaultAction: Redeem!
  ethAmount: BigInt!
}

type ZapSell @entity {
  id: ID!
  vaultAction: Mint!
  ethAmount: BigInt!
}

type ZapSwap @entity {
  id: ID!
  vaultAction: Swap!
  ethAmount: BigInt!
}